import React from 'react';
import useAnime from '@/hooks/useAnimeVisualize';
import Navbar from '@/components/Navbar';
import MovieList from "@/components/MovieList";
import useFavorites from "@/hooks/useFavorites";

function Library() {
  const [anime, loading, error] = useAnime({ sort: 'title', filter: 'action' });
  return (
    <>
      <div className="flex justify-center items-center h-auto">
        <div className="flex flex-wrap justify-center">
          {anime.map((anime) => (
            <div key={anime.id} className="m-4 p-4 border-2 border-gray-300 text-white">
              <img className="w-60 h-72 object-cover" src={anime.thumbnaiUrl} alt={anime.title} />
              <h2 className="mt-2 text-center text-black font-black">{anime.title}</h2>
            </div>
          ))}
        </div>
      </div>
      {/* <MovieList title="Trending Now" data={anime} /> */}
      {/* <MovieList title="Top Rated" data={useFavorites().data} /> */}
    </>
  );
}

export default Library;


import { useCallback, useEffect, useState } from "react";
import { BsChevronDown, BsSearch, BsBell } from "react-icons/bs";
import axios from "axios";
import Link from 'next/link'; 
//>
//<

import MobileMenu from "./MobileMenu";
import NavbarItem from "./NavbarItem";
import AccountMenu from "./AccountMenu";
import AnimeAddForm from "./AnimeAddForm";

const TOP_OFFSET = 66;

const Navbar = () => {
  const [showMobileMenu, setShowMobileMenu] = useState(false);
  const [showAccountMenu, setShowAccountMenu] = useState(false);
  const [showBackground, setShowBackground] = useState(false);
  const [showAddMovieForm, setShowAddMovieForm] = useState(false);
  //>//<
  const [isAdmin, setIsAdmin] = useState(false);


  // function to check isAdmin
  useEffect(() => {
    axios
      .get("/api/current")
      .then((response) => {
        setIsAdmin(response.data.isAdmin); 
      })
      .catch((error) => {
        console.error("Error fetching data: ", error);
      });
  }, []);

  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY >= TOP_OFFSET) {
        setShowBackground(true);
      } else {
        setShowBackground(false);
      }
    };
    window.addEventListener("scroll", handleScroll);

    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);

  const toggleMobileMenu = useCallback(() => {
    setShowMobileMenu((current) => !current);
  }, []);

  const toggleAccountMenu = useCallback(() => {
    setShowAccountMenu((current) => !current);
  }, []);

  //>
  //<

  return (
    <nav className="w-full fixed z-40">
      <div
        className={`
            px-4
            md:px-26
            py-6
            flex
            flex-row
            items-center
            transition
            duration-500
            bg-slate-500
            ${showBackground ? "bg-slate-500 bg-opacity-100" : ""}
            `}
      >
        <img className="h-10 lg:h-20 " src="/images/logoOni.png" alt="Logo" />
        <p className="text-black p-4 font-bold lg:text-xl ">MyAnimeZone</p>
        <div
          className="
                flex-row
                ml-8
                gap-7
                hidden
                lg:flex
                "
        >
          <Link href="/">
            <NavbarItem label="Home" />
          </Link>
          <NavbarItem label="Series" />
          <NavbarItem label="Films" />
          {/* check if the isAdmin is true and if it is visualise button */}
          {isAdmin && <NavbarItem label="Add Anime" onClick={() => setShowAddMovieForm(!showAddMovieForm)} />}
          {showAddMovieForm && <AnimeAddForm onClose={() => setShowAddMovieForm(false)} />}
          <Link href="/library">
            <NavbarItem label="My Library" />
          </Link>
        </div>
        <div
          onClick={toggleMobileMenu}
          className="lg:hidden flex flex-row items-center gap-2 ml-8 cursor-pointer relative"
        >
          <p className="text-black text-sm">Browse</p>
          <BsChevronDown
            className={`text-black transition ${
              showMobileMenu ? "rotate-180" : "rotate-0"
            }`}
          />
          <MobileMenu visible={showMobileMenu} />
        </div>
        <div className="flex flex-row ml-auto gap-7 items-center">
          <div className="text-gray-200 hover:text-gray-300 cursor-pointer transition">
            <BsSearch />
          </div>
          <div className="text-gray-200 hover:text-gray-300 cursor-pointer transition">
            <BsBell />
          </div>

          <div
            onClick={toggleAccountMenu}
            className="flex flex-row items-center gap-2 cursor-pointer relative"
          >
            <div className="w-6 h-6 lg:w-10 lg:h-10 rounded-md overflow-hidden relative">
              <img src="/images/default-blue.png" alt="" />
            </div>
            <BsChevronDown
              className={`text-black transition ${
                showAccountMenu ? "rotate-180" : "rotate-0"
              }`}
            />
            <AccountMenu visible={showAccountMenu} />
          </div>
        </div>
      </div>
    </nav>
  );
};
export default Navbar;



//
<div className="flex justify-center items-center border-2 border-gray-300 w-auto cursor-pointer rounded-lg pr-2">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            strokeWidth={1.5}
            stroke="black"
            className="w-6 h-6 hover:scale-110 transition-transform duration-200 ml-2"
            onClick={handleClick}
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"
            />
          </svg>
          <input
            type="text"
            placeholder="Search in your library"
            className="focus:outline-none cursor-pointer w-96 h-10 pl-2 pr-2 rounded-lg bg-transparent"
          />{" "}
        </div>
